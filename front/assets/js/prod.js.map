{"version":3,"sources":["custom.js"],"names":["doc","get","query","location","document","querySelector","getAll","Array","prototype","slice","call","querySelectorAll","id","getElementById","create","item","appendTo","setClass","style","attributes","a","createElement","appendChild","isArray","i","length","classList","add","Object","entries","setProperty","setAttribute","checkifLoggedIn","token","localStorage","getItem","console","log","window","href","profilePage","registerPage","loginPage","feedPage","commentsPage","postUploadPage","optionsCloseBtn","optionsOpenBtn","optionsWindow","addEventListener","display","removeProperty","profileGallery","fetch","method","headers","Content-Type","x-auth","then","response","json","Error","innerText","followingCount","followersCount","src","postPic","catch","error","registerUser","username","value","email","password","body","JSON","stringify","header","status","alert","e","login","ok","setItem","myJson","feed","post","insertBefore","firstChild","postHeader","postAuthor","background-image","user","postInteractions","interactionIcons","data-parentPost","_id","likes","postComments","postDescription","j","comments","comment","drawPosts","createComment","newComment","postId","RegExp","exec","list","getElementsByClassName","innerHTML","post-id","commentsSection","textPart","loadComments","preventDefault","reload","submitetFile","data","FormData","append","files"],"mappings":"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","file":"prod.js","sourcesContent":["const doc = {\r\n\r\n    get: function (query, location) {\r\n        if (typeof location === 'string') return document.querySelector(location).querySelector(query);\r\n        if (!location) return document.querySelector(query);\r\n        return location.querySelector(query);\r\n    },\r\n\r\n    getAll: function (query, location) {\r\n        if (typeof location === 'string') return Array.prototype.slice.call(document.querySelector(location).querySelectorAll(query));\r\n        if (!location) return Array.prototype.slice.call(document.querySelectorAll(query));\r\n        return Array.prototype.slice.call(location.querySelectorAll(query));\r\n    },\r\n\r\n    id: function (query) {\r\n        return document.getElementById(query);\r\n    },\r\n\r\n    create: function (item, appendTo, setClass, style, attributes) {\r\n        let a = document.createElement(item);\r\n        if (!!appendTo) appendTo.appendChild(a);\r\n        if (!!setClass && Array.isArray(setClass)) {\r\n            for (let i = 0; i < setClass.length; i++) {\r\n                a.classList.add(setClass[i]);\r\n            }\r\n        } else if (!!setClass) a.classList.add(setClass);\r\n        if (typeof style === 'object') {\r\n            for (let i = 0; i < Object.entries(style).length; i++) {\r\n                a.style.setProperty(Object.entries(style)[i][0], Object.entries(style)[i][1]);\r\n            }\r\n        }\r\n        if (typeof attributes === 'object') {\r\n            for (let i = 0; i < Object.entries(attributes).length; i++) {\r\n                a.setAttribute(Object.entries(attributes)[i][0], Object.entries(attributes)[i][1]);\r\n            }\r\n        }\r\n        return a;\r\n    },\r\n};\r\n\r\n\r\nconst checkifLoggedIn = () => {\r\n    let token = localStorage.getItem('x-auth');\r\n    console.log(token);\r\n    if (!token) {\r\n        window.location.href = \"./login.html\";\r\n    }\r\n};\r\n\r\nconst profilePage = document.getElementById('profile-page');\r\nconst registerPage = document.getElementById('registerPage');\r\nconst loginPage = document.getElementById('loginPage');\r\nconst feedPage = document.getElementById('feedPage');\r\nconst commentsPage = document.getElementById('commentsPage');\r\nconst postUploadPage = doc.id('postUpload');\r\n\r\nif (!!loginPage || !!registerPage) {\r\n\r\n} else {\r\n    checkifLoggedIn();\r\n}\r\n\r\n\r\n// Profile page -> Options\r\n\r\nif (!!profilePage) {\r\n\r\n    const optionsCloseBtn = document.getElementById('optionsCloseBtn');\r\n    const optionsOpenBtn = document.getElementById('optionsOpenBtn');\r\n    const optionsWindow = document.getElementById('optionsWindow');\r\n\r\n    optionsCloseBtn.addEventListener('click', () => {\r\n        optionsWindow.style.display = 'none';\r\n    });\r\n\r\n    optionsOpenBtn.addEventListener('click', () => {\r\n        optionsWindow.style.removeProperty('display');\r\n    });\r\n\r\n    let token = localStorage.getItem('x-auth');\r\n    let profileGallery = doc.id('profileGallery');\r\n    fetch('http://localhost:3000/instagram/user/profile', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'x-auth': token\r\n        }\r\n    }).then((response) => {\r\n        console.log(response);\r\n        if (!response) throw Error();\r\n        else {\r\n            return response.json();\r\n        }\r\n        }).then((response) => {\r\n            let postCount = doc.id('postCount');\r\n            postCount.innerText = response.length;\r\n\r\n            let followingCount = doc.id('followingCount');\r\n            let followersCount = doc.id('followersCount');\r\n\r\n            followingCount.innerText = '0';\r\n            followersCount.innerText = '0';\r\n\r\n        for (let i = 0; i < response.length; i++) {\r\n            let postImage = doc.create('img', profileGallery, 'gallery-photo', 0, { src: \"../\" + response[i].postPic });\r\n        }\r\n\r\n\r\n    }).catch((error) => {\r\n        console.log(error);\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n// Register page\r\n\r\n\r\nif (!!registerPage) {\r\n    const registerBtn = document.getElementById('registerSubmitBtn');\r\n\r\n    const registerUser = () => {\r\n        let username = document.getElementById('registerUsername').value;\r\n        let email = document.getElementById('registerEmail').value;\r\n        let password = document.getElementById('registerPassword').value;\r\n        let rPassword = document.getElementById('registerRPassword').value;\r\n\r\n        if (password === rPassword) {\r\n\r\n            let body = {\r\n                password: password,\r\n                username: username,\r\n                email: email\r\n            }\r\n            fetch('http://localhost:3000/instagram/user/register', {\r\n                method: 'POST',\r\n                body: JSON.stringify(body),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((header) => {\r\n                console.log(header);\r\n                if (header.status == 200) {\r\n                    return header.json();\r\n                } else {\r\n                    alert('Registration failed')\r\n                }\r\n            }).then((response) => {\r\n                if (response) {\r\n                    // alert('Registration successful')\r\n                    window.location.href = '../front/login.html';\r\n                }\r\n            }).catch((e) => {\r\n                console.log(e)\r\n            })\r\n        }\r\n    };\r\n\r\n    registerBtn.addEventListener('click', registerUser);\r\n}\r\n\r\n\r\n// Login page\r\n\r\n\r\nif (!!loginPage) {\r\n    const login = () => {\r\n        let email = document.getElementById('loginEmail').value;\r\n        let password = document.getElementById('loginPassword').value;\r\n        console.log('email', email, 'password', password)\r\n        let body = {\r\n            email: email,\r\n            password: password,\r\n        }\r\n        fetch('http://localhost:3000/instagram/user/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((header) => {\r\n            console.log(header);\r\n\r\n            if (!header.ok) {\r\n                throw Error(header);\r\n            }\r\n\r\n            let token = header.headers.get('x-auth');\r\n            localStorage.setItem('x-auth', token);\r\n            console.log(token);\r\n        }).then((response) => {\r\n            // alert('Login successful')\r\n            window.location.href = '../front/index.html';\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            // alert('Login failed');\r\n        })\r\n\r\n\r\n    }\r\n\r\n    const loginBtn = document.getElementById('loginSubmitBtn');\r\n\r\n    loginBtn.addEventListener('click', login);\r\n}\r\n\r\n// Feed page\r\n\r\n\r\nif (!!feedPage) {\r\n\r\n    const drawPosts = () => {\r\n        //let list = document.getElementsByClassName('comments');\r\n        let token = localStorage.getItem('x-auth');\r\n        // list.innerHTML = '';\r\n        fetch('http://localhost:3000/instagram/post/getAllPosts', {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            console.log(response);\r\n\r\n            if (!response.ok) {\r\n                throw Error(response);\r\n            }\r\n            return response.json();\r\n        }).then((myJson) => {\r\n            console.log(myJson)\r\n            // let content = document.createElement('div');\r\n\r\n            // content.setAttribute('class', 'card-container')\r\n            let feed = doc.id('feed');\r\n\r\n            for (let i = 0; i < myJson.length; i++) {\r\n                let post = doc.create('article', 0, \"post\");\r\n\r\n                feed.insertBefore(post, feed.firstChild);\r\n\r\n\r\n                let postHeader = doc.create('section', post, 'post-header');\r\n                let postAuthor = doc.create('a', postHeader, 'post-author');\r\n                let postAuthorUserImage = doc.create('div', postAuthor, ['user-image', 'user-image--post-author'], { 'background-image': 'url(\"./assets/images/user.jpg\")' })\r\n                let postAuthorName = doc.create('p', postAuthor, 'post-author__name');\r\n                postAuthorName.innerText = myJson[i].user.username;\r\n\r\n\r\n                let postImage = doc.create('img', post, 'post-image', 0, { src: \"../\" + myJson[i].postPic });\r\n\r\n\r\n                let postInteractions = doc.create('section', post, 'post-interactions');\r\n\r\n                let interactionIcons = doc.create('div', postInteractions, 'interaction-icons');\r\n                let interactionsIconsLike = doc.create('div', interactionIcons, 'interaction-icons__like');\r\n                let interactionIconsComment = doc.create('div', interactionIcons, 'interaction-icons__comment', 0, { 'data-parentPost': myJson[i]._id });\r\n                interactionIconsComment.addEventListener('click', (e) => { window.location.href = `./comments.html?${myJson[i]._id}` })\r\n                let interactionIconsShare = doc.create('div', interactionIcons, 'interaction-icons__share');\r\n                let likeCount = doc.create('p', postInteractions, ['count', 'count--likes']);\r\n                likeCount.innerText = myJson[i].likes.length + \" likes\";\r\n\r\n                let postComments = doc.create('div', postInteractions, 'post-comments');\r\n                let postDescription = doc.create('div', postComments, 'comment');\r\n                let postDescriptionAuthor = doc.create('a', postDescription, 'comment__author', 0, { href: './profile.html' });\r\n                postDescriptionAuthor.innerText = myJson[i].user.username;\r\n                let postDescriptionText = doc.create('span', postDescription, 'comment__content');\r\n                postDescriptionText.innerText = myJson[i].postDescription;\r\n\r\n\r\n                for (j = 0; j < myJson[i].comments.length; j++) {\r\n\r\n                    let comment = doc.create('div', postComments, 'comment');\r\n                    let commentAuthor = doc.create('a', comment, 'comment__author', 0, { href: './profile.html' });\r\n                    commentAuthor.innerText = myJson[i].comments[j].user.username;\r\n                    let commentText = doc.create('span', comment, 'comment__content');\r\n                    commentText.innerText = myJson[i].comments[j].comment;\r\n                }\r\n\r\n\r\n\r\n                // commentButton.addEventListener(\"click\", () => {\r\n                //     newCommentInput.setAttribute(\"id\", \"comment\")\r\n                //     createComment(myJson[i]._id);\r\n                //     console.log(i)\r\n                //     newCommentInput.removeAttribute(\"id\")\r\n                //     //location.reload();\r\n\r\n                // });\r\n\r\n            }\r\n            // document.getElementsByClassName('card-container')[0].appendChild(content);\r\n\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        })\r\n\r\n    };\r\n    drawPosts();\r\n}\r\n\r\n\r\n// Comments page\r\n\r\n\r\n\r\nif (!!commentsPage) {\r\n\r\n    const backBtn = document.getElementById('commentsBackBtn');\r\n\r\n    backBtn.addEventListener('click', () => {\r\n        window.location.href = \"index.html\";\r\n    });\r\n\r\n\r\n    const createComment = () => {\r\n\r\n        let newComment = document.getElementById('commentInput').value;\r\n        let token = localStorage.getItem('x-auth');\r\n        const regex = RegExp(/(?:\\?)(.*)/g);\r\n        const postId = regex.exec(window.location.href)[1];\r\n        let body = {\r\n            comment: newComment,\r\n            postId: postId,\r\n        }\r\n\r\n        fetch('http://localhost:3000/instagram/comment/create', {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((header) => {\r\n            console.log(header);\r\n            if (!header.ok) {\r\n                throw Error(header);\r\n            }\r\n        }).then((response) => {\r\n            // alert('Item added successfully')\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            // alert('Adding failed');\r\n        })\r\n\r\n    };\r\n\r\n    const loadComments = () => {\r\n        let list = document.getElementsByClassName('comments');\r\n        let token = localStorage.getItem('x-auth');\r\n        const regex = RegExp(/(?:\\?)(.*)/g);\r\n        const postId = regex.exec(window.location.href)[1];\r\n        list.innerHTML = '';\r\n        fetch('http://localhost:3000/instagram/comment/getAllComments', {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json',\r\n                'post-id': postId\r\n            }\r\n        }).then((response) => {\r\n            //console.log(response);\r\n            if (!response.ok) {\r\n                throw Error(response);\r\n            }\r\n            return response.json();\r\n        }).then((myJson) => {\r\n            console.log(myJson);\r\n\r\n\r\n            let commentsSection = doc.id('comments');\r\n\r\n            for (let i = 0; i < myJson.length; i++) {\r\n                let comment = doc.create('article', commentsSection, ['comment', 'comment--comments-page']);\r\n                let userImage = doc.create('div', comment, ['user-image', 'user-image--post-author'], { 'background-image': 'url(\"./assets/images/user.jpg\")' });\r\n                let textPart = doc.create('div', comment, 'comment__text-part');\r\n                let commentAuthor = doc.create('a', textPart, 'comment__author');\r\n                commentAuthor.innerText = myJson[i].user.username;\r\n\r\n                let commentContent = doc.create('span', textPart, 'comment__content');\r\n                commentContent.innerText = myJson[i].comment;\r\n            }\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        })\r\n\r\n    };\r\n    loadComments();\r\n\r\n\r\n    const commentBtn = document.getElementById('postComment');\r\n\r\n    commentBtn.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        createComment();\r\n        // doc.id('comments').innerHTML = '';\r\n        // try {\r\n        //     loadComments();\r\n        // } catch (error) {\r\n        //     console.log(error);\r\n        // }\r\n        location.reload();\r\n    });\r\n}\r\n\r\n// Post upload page\r\n\r\nif (!!postUploadPage) {\r\n\r\n    const submitBtn = document.getElementById('submitBtn');\r\n\r\n    submitBtn.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n\r\n        let submitetFile = document.getElementById('submitedFile');\r\n        let postDescription = doc.id('postDesc').value;\r\n        let token = localStorage.getItem('x-auth');\r\n\r\n        let data = new FormData()\r\n        data.append('avatar', submitetFile.files[0]);\r\n        data.append('postDescription', postDescription);\r\n\r\n        fetch('http://localhost:3000/instagram/user/uploadFile', {\r\n            method: 'POST',\r\n            body: data,\r\n            headers: {\r\n\r\n                'x-auth': token,\r\n            }\r\n\r\n\r\n        }\r\n\r\n        ).catch((error) => {\r\n            console.log(error);\r\n        });\r\n        window.location.href = './index.html';\r\n\r\n    })\r\n};\r\n"]}