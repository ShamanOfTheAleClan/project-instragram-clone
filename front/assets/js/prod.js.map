{"version":3,"sources":["custom.js"],"names":["doc","get","query","location","document","querySelector","getAll","Array","prototype","slice","call","querySelectorAll","id","getElementById","create","item","appendTo","setClass","style","attributes","a","createElement","appendChild","isArray","i","length","classList","add","Object","entries","setProperty","setAttribute","checkifLoggedIn","token","localStorage","getItem","console","log","window","href","profilePage","registerPage","loginPage","feedPage","commentsPage","optionsCloseBtn","optionsOpenBtn","optionsWindow","addEventListener","display","removeProperty","registerUser","username","value","email","password","body","fetch","method","JSON","stringify","headers","Content-Type","then","header","status","json","alert","response","catch","e","login","ok","Error","setItem","x-auth","myJson","feed","post","postHeader","postAuthor","background-image","innerText","user","src","postPic","postInteractions","interactionIcons","data-parentPost","_id","likes","postComments","postDescription","j","comments","comment","drawPosts","createComment","newComment","postId","RegExp","exec","loadComments","list","getElementsByClassName","innerHTML","post-id","commentsSection","textPart"],"mappings":"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","file":"prod.js","sourcesContent":["const doc = {\r\n\r\n    get: function (query, location) {\r\n        if (typeof location === 'string') return document.querySelector(location).querySelector(query);\r\n        if (!location) return document.querySelector(query);\r\n        return location.querySelector(query);\r\n    },\r\n\r\n    getAll: function (query, location) {\r\n        if (typeof location === 'string') return Array.prototype.slice.call(document.querySelector(location).querySelectorAll(query));\r\n        if (!location) return Array.prototype.slice.call(document.querySelectorAll(query));\r\n        return Array.prototype.slice.call(location.querySelectorAll(query));\r\n    },\r\n\r\n    id: function (query) {\r\n        return document.getElementById(query);\r\n    },\r\n\r\n    create: function (item, appendTo, setClass, style, attributes) {\r\n        let a = document.createElement(item);\r\n        if (!!appendTo) appendTo.appendChild(a);\r\n        if (!!setClass && Array.isArray(setClass)) {\r\n            for (let i = 0; i < setClass.length; i++) {\r\n                a.classList.add(setClass[i]);\r\n            }\r\n        } else if (!!setClass) a.classList.add(setClass);\r\n        if (typeof style === 'object') {\r\n            for (let i = 0; i < Object.entries(style).length; i++) {\r\n                a.style.setProperty(Object.entries(style)[i][0], Object.entries(style)[i][1]);\r\n            }\r\n        }\r\n        if (typeof attributes === 'object') {\r\n            for (let i = 0; i < Object.entries(attributes).length; i++) {\r\n                a.setAttribute(Object.entries(attributes)[i][0], Object.entries(attributes)[i][1]);\r\n            }\r\n        }\r\n        return a;\r\n    },\r\n};\r\n\r\n\r\nconst checkifLoggedIn = () => {\r\n    let token = localStorage.getItem('x-auth');\r\n    console.log(token)\r\n    if (!token) {\r\n        window.location.href = \"../login.html\";\r\n    }\r\n};\r\n\r\nconst profilePage = document.getElementById('profile-page');\r\nconst registerPage = document.getElementById('registerPage');\r\nconst loginPage = document.getElementById('loginPage');\r\nconst feedPage = document.getElementById('feedPage');\r\nconst commentsPage = document.getElementById('commentsPage');\r\n\r\nif (!loginPage || !registerPage) checkifLoggedIn();\r\n\r\n\r\n// Profile page -> Options\r\n\r\nif (!!profilePage) {\r\n\r\n    const optionsCloseBtn = document.getElementById('optionsCloseBtn');\r\n    const optionsOpenBtn = document.getElementById('optionsOpenBtn');\r\n    const optionsWindow = document.getElementById('optionsWindow');\r\n\r\n    optionsCloseBtn.addEventListener('click', () => {\r\n        optionsWindow.style.display = 'none';\r\n    });\r\n\r\n    optionsOpenBtn.addEventListener('click', () => {\r\n        optionsWindow.style.removeProperty('display');\r\n    });\r\n}\r\n\r\n\r\n\r\n// Register page\r\n\r\n\r\nif (!!registerPage) {\r\n    const registerBtn = document.getElementById('registerSubmitBtn');\r\n\r\n    const registerUser = () => {\r\n        let username = document.getElementById('registerUsername').value;\r\n        let email = document.getElementById('registerEmail').value;\r\n        let password = document.getElementById('registerPassword').value;\r\n        let rPassword = document.getElementById('registerRPassword').value;\r\n\r\n        if (password === rPassword) {\r\n\r\n            let body = {\r\n                password: password,\r\n                username: username,\r\n                email: email\r\n            }\r\n            fetch('http://localhost:3000/instagram/user/register', {\r\n                method: 'POST',\r\n                body: JSON.stringify(body),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((header) => {\r\n                console.log(header);\r\n                if (header.status == 200) {\r\n                    return header.json();\r\n                } else {\r\n                    alert('Registration failed')\r\n                }\r\n            }).then((response) => {\r\n                if (response) {\r\n                    // alert('Registration successful')\r\n                    window.location.href = '../front/login.html';\r\n                }\r\n            }).catch((e) => {\r\n                console.log(e)\r\n            })\r\n        }\r\n    };\r\n\r\n    registerBtn.addEventListener('click', registerUser);\r\n}\r\n\r\n\r\n// Login page\r\n\r\n\r\nif (!!loginPage) {\r\n    const login = () => {\r\n        let email = document.getElementById('loginEmail').value;\r\n        let password = document.getElementById('loginPassword').value;\r\n        console.log('email', email, 'password', password)\r\n        let body = {\r\n            email: email,\r\n            password: password,\r\n        }\r\n        fetch('http://localhost:3000/instagram/user/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((header) => {\r\n            console.log(header);\r\n\r\n            if (!header.ok) {\r\n                throw Error(header);\r\n            }\r\n\r\n            let token = header.headers.get('x-auth');\r\n            localStorage.setItem('x-auth', token);\r\n            console.log(token);\r\n        }).then((response) => {\r\n            // alert('Login successful')\r\n            window.location.href = '../front/index.html';\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            // alert('Login failed');\r\n        })\r\n\r\n\r\n    }\r\n\r\n    const loginBtn = document.getElementById('loginSubmitBtn');\r\n\r\n    loginBtn.addEventListener('click', login);\r\n}\r\n\r\n// Feed page\r\n\r\n\r\nif (!!feedPage) {\r\n\r\n    const drawPosts = () => {\r\n        //let list = document.getElementsByClassName('comments');\r\n        let token = localStorage.getItem('x-auth');\r\n        // list.innerHTML = '';\r\n        fetch('http://localhost:3000/instagram/post/getAllPosts', {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            console.log(response);\r\n\r\n            if (!response.ok) {\r\n                throw Error(response);\r\n            }\r\n            return response.json();\r\n        }).then((myJson) => {\r\n            console.log(myJson)\r\n            // let content = document.createElement('div');\r\n\r\n            // content.setAttribute('class', 'card-container')\r\n            let feed = doc.id('feed');\r\n\r\n            for (let i = 0; i < myJson.length; i++) {\r\n                let post = doc.create('article', feed, \"post\");\r\n\r\n\r\n                let postHeader = doc.create('section', post, 'post-header');\r\n                let postAuthor = doc.create('a', postHeader, 'post-author');\r\n                let postAuthorUserImage = doc.create('div', postAuthor, ['user-image', 'user-image--post-author'], { 'background-image': 'url(\"./assets/images/user.jpg\")' })\r\n                let postAuthorName = doc.create('p', postAuthor, 'post-author__name');\r\n                postAuthorName.innerText = myJson[i].user.username;\r\n\r\n\r\n                let postImage = doc.create('img', post, 'post-image', 0, { src: \"../\" + myJson[i].postPic });\r\n\r\n\r\n                let postInteractions = doc.create('section', post, 'post-interactions');\r\n\r\n                let interactionIcons = doc.create('div', postInteractions, 'interaction-icons');\r\n                let interactionsIconsLike = doc.create('div', interactionIcons, 'interaction-icons__like');\r\n                let interactionIconsComment = doc.create('div', interactionIcons, 'interaction-icons__comment', 0, { 'data-parentPost': myJson[i]._id });\r\n                interactionIconsComment.addEventListener('click', (e) => { window.location.href = `./comments.html?${myJson[i]._id}` })\r\n                let interactionIconsShare = doc.create('div', interactionIcons, 'interaction-icons__share');\r\n                let likeCount = doc.create('p', postInteractions, ['count', 'count--likes']);\r\n                likeCount.innerText = myJson[i].likes.length + \" likes\";\r\n\r\n                let postComments = doc.create('div', postInteractions, 'post-comments');\r\n                let postDescription = doc.create('div', postComments, 'comment');\r\n                let postDescriptionAuthor = doc.create('a', postDescription, 'comment__author', 0, { href: './profile.html' });\r\n                postDescriptionAuthor.innerText = myJson[i].user.username;\r\n                let postDescriptionText = doc.create('span', postDescription, 'comment__content');\r\n                postDescriptionText.innerText = myJson[i].postDescription;\r\n\r\n\r\n                for (j = 0; j < myJson[i].comments.length; j++) {\r\n\r\n                    let comment = doc.create('div', postComments, 'comment');\r\n                    let commentAuthor = doc.create('a', comment, 'comment__author', 0, { href: './profile.html' });\r\n                    commentAuthor.innerText = myJson[i].comments[j].user.username;\r\n                    let commentText = doc.create('span', comment, 'comment__content');\r\n                    commentText.innerText = myJson[i].comments[j].comment;\r\n                }\r\n\r\n\r\n\r\n                // commentButton.addEventListener(\"click\", () => {\r\n                //     newCommentInput.setAttribute(\"id\", \"comment\")\r\n                //     createComment(myJson[i]._id);\r\n                //     console.log(i)\r\n                //     newCommentInput.removeAttribute(\"id\")\r\n                //     //location.reload();\r\n\r\n                // });\r\n\r\n            }\r\n            // document.getElementsByClassName('card-container')[0].appendChild(content);\r\n\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        })\r\n\r\n    };\r\n    drawPosts();\r\n}\r\n\r\n\r\n// Comments page\r\n\r\n\r\n\r\nif (!!commentsPage) {\r\n\r\n    const backBtn = document.getElementById('commentsBackBtn');\r\n\r\n    backBtn.addEventListener('click', () => {\r\n        window.location.href = \"index.html\";\r\n    });\r\n\r\n\r\n    const createComment = () => {\r\n\r\n        let newComment = document.getElementById('commentInput').value;\r\n        let token = localStorage.getItem('x-auth');\r\n        const regex = RegExp(/(?:\\?)(.*)/g);\r\n        const postId = regex.exec(window.location.href)[1];\r\n        let body = {\r\n            comment: newComment,\r\n            postId: postId,\r\n        }\r\n\r\n        fetch('http://localhost:3000/instagram/comment/create', {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((header) => {\r\n            console.log(header);\r\n            if (!header.ok) {\r\n                throw Error(header);\r\n            }\r\n        }).then((response) => {\r\n            // alert('Item added successfully')\r\n        }).catch((e) => {\r\n            console.log(e);\r\n            // alert('Adding failed');\r\n        })\r\n\r\n    };\r\n\r\n    const loadComments = () => {\r\n        let list = document.getElementsByClassName('comments');\r\n        let token = localStorage.getItem('x-auth');\r\n        const regex = RegExp(/(?:\\?)(.*)/g);\r\n        const postId = regex.exec(window.location.href)[1];\r\n        list.innerHTML = '';\r\n        fetch('http://localhost:3000/instagram/comment/getAllComments', {\r\n            method: 'GET',\r\n            headers: {\r\n                'x-auth': token,\r\n                'Content-Type': 'application/json',\r\n                'post-id': postId\r\n            }\r\n        }).then((response) => {\r\n            //console.log(response);\r\n            if (!response.ok) {\r\n                throw Error(response);\r\n            }\r\n            return response.json();\r\n        }).then((myJson) => {\r\n            console.log(myJson);\r\n\r\n\r\n            let commentsSection = doc.id('comments');\r\n\r\n            for (let i = 0; i < myJson.length; i++) {\r\n                let comment = doc.create('article', commentsSection, ['comment', 'comment--comments-page']);\r\n                let userImage = doc.create('div', comment, ['user-image', 'user-image--post-author'],{ 'background-image': 'url(\"./assets/images/user.jpg\")' });\r\n                let textPart = doc.create('div', comment, 'comment__text-part');\r\n                let commentAuthor = doc.create('a', textPart, 'comment__author');\r\n                commentAuthor.innerText = myJson[i].user.username;\r\n\r\n                let commentContent = doc.create('span', textPart, 'comment__content');\r\n                commentContent.innerText = myJson[i].comment;\r\n            }\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        })\r\n\r\n    };\r\n    loadComments();\r\n\r\n\r\n    const commentBtn = document.getElementById('postComment');\r\n\r\n    commentBtn.addEventListener('click', () => {\r\n        createComment();\r\n        doc.id('comments').innerHTML = '';\r\n        loadComments();\r\n        // location.reload();\r\n    });\r\n}"]}